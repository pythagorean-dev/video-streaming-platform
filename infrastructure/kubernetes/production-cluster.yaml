# Kubernetes Production Cluster Configuration
# VideoStream Pro - YouTube Alternative Platform

apiVersion: v1
kind: Namespace
metadata:
  name: videostream
  labels:
    name: videostream
    environment: production

---
# ConfigMaps for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: videostream-config
  namespace: videostream
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  REDIS_URL: "redis://redis-cluster:6379"
  MONGODB_URL: "mongodb://mongodb-cluster:27017/videostream_analytics"
  CDN_BASE_URL: "https://cdn.videostream.pro"
  API_BASE_URL: "https://api.videostream.pro"
  FRONTEND_URL: "https://videostream.pro"

---
# Secrets for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: videostream-secrets
  namespace: videostream
type: Opaque
data:
  JWT_SECRET: <base64-encoded-jwt-secret>
  DATABASE_URL: <base64-encoded-postgres-connection-string>
  REDIS_PASSWORD: <base64-encoded-redis-password>
  AWS_ACCESS_KEY_ID: <base64-encoded-aws-access-key>
  AWS_SECRET_ACCESS_KEY: <base64-encoded-aws-secret-key>
  GOOGLE_CLIENT_ID: <base64-encoded-google-client-id>
  GOOGLE_CLIENT_SECRET: <base64-encoded-google-client-secret>

---
# API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: videostream
  labels:
    app: api-gateway
    tier: gateway
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        tier: gateway
    spec:
      containers:
      - name: api-gateway
        image: videostream/api-gateway:latest
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: PORT
          value: "3001"
        envFrom:
        - configMapRef:
            name: videostream-config
        - secretRef:
            name: videostream-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5

---
# API Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: videostream
  labels:
    app: api-gateway
spec:
  selector:
    app: api-gateway
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3001
  type: ClusterIP

---
# Auth Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: videostream
  labels:
    app: auth-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        tier: backend
    spec:
      containers:
      - name: auth-service
        image: videostream/auth-service:latest
        ports:
        - containerPort: 3002
        envFrom:
        - configMapRef:
            name: videostream-config
        - secretRef:
            name: videostream-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"

---
# Auth Service Service
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: videostream
spec:
  selector:
    app: auth-service
  ports:
  - protocol: TCP
    port: 3002
    targetPort: 3002

---
# Video Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: video-service
  namespace: videostream
  labels:
    app: video-service
    tier: backend
spec:
  replicas: 4
  selector:
    matchLabels:
      app: video-service
  template:
    metadata:
      labels:
        app: video-service
        tier: backend
    spec:
      containers:
      - name: video-service
        image: videostream/video-service:latest
        ports:
        - containerPort: 3003
        envFrom:
        - configMapRef:
            name: videostream-config
        - secretRef:
            name: videostream-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: video-storage
          mountPath: /app/uploads
      volumes:
      - name: video-storage
        persistentVolumeClaim:
          claimName: video-storage-pvc

---
# Video Service Service
apiVersion: v1
kind: Service
metadata:
  name: video-service
  namespace: videostream
spec:
  selector:
    app: video-service
  ports:
  - protocol: TCP
    port: 3003
    targetPort: 3003

---
# User Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: videostream
  labels:
    app: user-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        tier: backend
    spec:
      containers:
      - name: user-service
        image: videostream/user-service:latest
        ports:
        - containerPort: 3004
        envFrom:
        - configMapRef:
            name: videostream-config
        - secretRef:
            name: videostream-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"

---
# User Service Service
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: videostream
spec:
  selector:
    app: user-service
  ports:
  - protocol: TCP
    port: 3004
    targetPort: 3004

---
# Analytics Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-service
  namespace: videostream
  labels:
    app: analytics-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: analytics-service
  template:
    metadata:
      labels:
        app: analytics-service
        tier: backend
    spec:
      containers:
      - name: analytics-service
        image: videostream/analytics-service:latest
        ports:
        - containerPort: 3005
        envFrom:
        - configMapRef:
            name: videostream-config
        - secretRef:
            name: videostream-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Analytics Service Service
apiVersion: v1
kind: Service
metadata:
  name: analytics-service
  namespace: videostream
spec:
  selector:
    app: analytics-service
  ports:
  - protocol: TCP
    port: 3005
    targetPort: 3005

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: videostream
  labels:
    app: frontend
    tier: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: frontend
    spec:
      containers:
      - name: frontend
        image: videostream/frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.videostream.pro"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: videostream
spec:
  selector:
    app: frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000

---
# Redis Cluster Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: videostream
spec:
  serviceName: redis-cluster
  replicas: 3
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --cluster-enabled
        - "yes"
        - --cluster-config-file
        - nodes.conf
        - --cluster-node-timeout
        - "5000"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: videostream
spec:
  clusterIP: None
  selector:
    app: redis-cluster
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379

---
# PostgreSQL Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: videostream
spec:
  serviceName: postgres-primary
  replicas: 1
  selector:
    matchLabels:
      app: postgres-primary
  template:
    metadata:
      labels:
        app: postgres-primary
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: videostream
        - name: POSTGRES_USER
          value: videostream
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: videostream-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
  namespace: videostream
spec:
  selector:
    app: postgres-primary
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432

---
# MongoDB for Analytics
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-cluster
  namespace: videostream
spec:
  serviceName: mongodb-cluster
  replicas: 3
  selector:
    matchLabels:
      app: mongodb-cluster
  template:
    metadata:
      labels:
        app: mongodb-cluster
    spec:
      containers:
      - name: mongodb
        image: mongo:7
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: videostream
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: videostream-secrets
              key: MONGODB_PASSWORD
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-cluster
  namespace: videostream
spec:
  clusterIP: None
  selector:
    app: mongodb-cluster
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017

---
# Horizontal Pod Autoscaler for API Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: videostream
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# HPA for Video Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: video-service-hpa
  namespace: videostream
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: video-service
  minReplicas: 4
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# HPA for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: videostream
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 3
  maxReplicas: 30
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# Ingress Controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: videostream-ingress
  namespace: videostream
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "500m"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - videostream.pro
    - api.videostream.pro
    secretName: videostream-tls
  rules:
  - host: videostream.pro
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  - host: api.videostream.pro
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 80

---
# Network Policies for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: videostream-network-policy
  namespace: videostream
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          tier: frontend
    - podSelector:
        matchLabels:
          tier: gateway
  egress:
  - {}

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: videostream
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api-gateway

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: video-service-pdb
  namespace: videostream
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: video-service

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: video-storage-pvc
  namespace: videostream
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Ti
  storageClassName: fast-ssd

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: videostream-monitoring
  namespace: videostream
  labels:
    app: videostream
spec:
  selector:
    matchLabels:
      tier: backend
  endpoints:
  - port: http
    path: /metrics
    interval: 30s